using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Security.Cryptography;

namespace Password_Generator
{
    public partial class Form1 : Form
    {
        // 33 - 126

        static int pasLen = 6;
        static int pasCount = 1;

        readonly Random random = new Random(1151443);
        readonly RandomNumberGenerator rng = RandomNumberGenerator.Create();

        int charcode = 33;
        int xs = 1;

        // random lib
        int RandomNumber_LowQuality()
        {
            return random.Next(33, 127);
        }

        // xorshift
        int RandomNumber_MedQuality()
        {
            xs ^= xs << 13;
            xs ^= xs >> 17;
            xs ^= xs << 5;

            int num = xs;

            do
            {
                num -= 93;
            } while (num > 127);

            do
            {
                num += 93;
            } while (num < 33);

            return num;
        }

        // cryptography generator
        int RandomNumber_HighQuality()
        {
            int count = 0;
            
            byte[] array = new byte[1];
            int num = 33;

            rng.GetBytes(array);

            for (int i = 0; i < array.Length; i++)
            {
                num += array[i];
            }

            do
            {
                num -= 93;
                count++;
            } while ((num > 127) || (count < 16));

            count = 0;
            do
            {
                num += 93;
            } while ((num < 33) || (count < 16));
            
            return num;
        }
        
        public Form1()
        {
            InitializeComponent();
            xs = (int)(222947776551 + System.DateTime.Today.Millisecond);

            ToolTipSecurityLevel.SetToolTip(SecurityLevelBox, "Security level of the passwords \n\rLow uses C#'s Random class,\nMedium uses linear Xorshift number generator,\nHigh uses a cryptographically secure number generator");
            ToolTipPasswordLength.SetToolTip(PasswordLength, "How long each generated password should be\nRange is between 2 to 1024 characters");
            ToolTipPasswordCount.SetToolTip(PasswordCount, "How many passwords to generate \n\rRange is between 1 and 128 unique passwords");
            ToolTipTrackbar.SetToolTip(IterationBar, "How many random iterations used \n\rHigher numbers result in more secure passwords, but slow the application");
            ToolTipGenerate.SetToolTip(ButtonGenerate, "Generate password(s)");
            ToolTipPasswordList.SetToolTip(PasswordList, "Password(s) generated by the application \n\rThey are not saved to your device automatically");
        }
        private void PasswordLenParse(object sender, KeyEventArgs e)
        {
            if (!(e.KeyCode == Keys.Enter))
            {
                return;
            }

            bool conversionSuccess = int.TryParse(PasswordLength.Text, out pasLen);

            if (conversionSuccess == false)
            {
                PasswordLength.Text = "6";
                pasLen = 6;
                MessageBox.Show("Invalid Length \n\rInput must be a number", "Secure Password Generator", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

            if ((pasLen < 2) || (pasLen > 1024))
            {
                PasswordLength.Text = "6";
                pasLen = 6;
                MessageBox.Show("Length out of bounds \n\rInput must be between 2 and 1024", "Secure Password Generator", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void PasswordCountParse(object sender, KeyEventArgs e)
        {
            if (!(e.KeyCode == Keys.Enter))
            {
                return;
            }

            bool conversionSuccess = int.TryParse(PasswordCount.Text, out pasCount);

            if (conversionSuccess == false)
            {
                PasswordCount.Text = "1";
                pasCount = 1;
                MessageBox.Show("Invalid Count \n\rInput must be a number", "Secure Password Generator", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

            if ((pasCount < 1) || (pasCount > 128))
            {
                PasswordCount.Text = "1";
                pasCount = 1;
                MessageBox.Show("Count out of bounds \n\rInput must be between 1 and 128", "Secure Password Generator", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void GeneratePasswords(object sender, EventArgs e)
        {
            if (SecurityLevelBox.SelectedIndex > 1)
            {
                DialogResult confirmation = MessageBox.Show("High Security generation speed is slow and may crash the application. \nAre you sure you want to continue?", "Secure Password Generator", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);

                if (confirmation == DialogResult.No)
                {
                    return;
                }
            }
            
            ButtonGenerate.Enabled = false;
            PasswordCount.Enabled = false;
            PasswordLength.Enabled = false;
            SecurityLevelBox.Enabled = false;
            IterationBar.Enabled = false;

            //PasswordList.Items.Clear();
            PasswordList.Text = "";

            for(int passCount = 0; passCount < pasCount; passCount++)
            {
                string password = "";

                for (int charCount = 0; charCount < pasLen; charCount++)
                {
                    for (int i = 0; i < IterationBar.Value; i++)
                    {
                        if (SecurityLevelBox.SelectedItem != null)
                        {
                            if (SecurityLevelBox.SelectedIndex == 1)
                            {
                                charcode = RandomNumber_LowQuality();
                            }
                            else if (SecurityLevelBox.SelectedIndex == 2)
                            {
                                charcode = RandomNumber_MedQuality();
                            }
                            else if (SecurityLevelBox.SelectedIndex == 3)
                            {
                                charcode = RandomNumber_HighQuality();
                            }
                            else
                            {
                                charcode = RandomNumber_LowQuality();
                            }
                        }
                        else
                        {
                            charcode = RandomNumber_LowQuality();
                        }
                    }

                    password += (char)charcode;
                }

                //PasswordList.Items.Add(password);
                PasswordList.Text += (password + "\n");
            }

            MessageBox.Show("Password(s) generated!", "Secure Password Generator", MessageBoxButtons.OK, MessageBoxIcon.Information);
            ButtonGenerate.Enabled = true;
            PasswordCount.Enabled = true;
            PasswordLength.Enabled = true;
            SecurityLevelBox.Enabled = true;
            IterationBar.Enabled = true;
        }

        private void PasswordCountParse(object sender, EventArgs e)
        {
            bool conversionSuccess = int.TryParse(PasswordCount.Text, out pasCount);

            if (conversionSuccess == false)
            {
                PasswordCount.Text = "1";
                pasCount = 1;
                MessageBox.Show("Invalid Count. Input must be a number", "Secure Password Generator", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

            if ((pasCount < 1) || (pasCount > 128))
            {
                PasswordCount.Text = "1";
                pasCount = 1;
                MessageBox.Show("Count out of bounds. Input must be between 1 and 128", "Secure Password Generator", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void PasswordLenParse(object sender, EventArgs e)
        {
            bool conversionSuccess = int.TryParse(PasswordLength.Text, out pasLen);

            if (conversionSuccess == false)
            {
                PasswordLength.Text = "6";
                pasLen = 6;
                MessageBox.Show("Invalid Length. Input must be a number", "Secure Password Generator", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

            if ((pasLen < 2) || (pasLen > 1024))
            {
                PasswordLength.Text = "6";
                pasLen = 6;
                MessageBox.Show("Length out of bounds. Input must be between 2 and 1024", "Secure Password Generator", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        
    }
}
